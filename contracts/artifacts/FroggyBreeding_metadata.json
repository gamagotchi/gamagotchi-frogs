{
	"compiler": {
		"version": "0.8.6+commit.11564f7e"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "contract IGeneMixer",
						"name": "_geneMixer",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_admin",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_seedAmount",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "approved",
						"type": "bool"
					}
				],
				"name": "ApprovalForAll",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256[]",
						"name": "ids",
						"type": "uint256[]"
					},
					{
						"indexed": false,
						"internalType": "uint256[]",
						"name": "values",
						"type": "uint256[]"
					}
				],
				"name": "TransferBatch",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "TransferSingle",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "string",
						"name": "value",
						"type": "string"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					}
				],
				"name": "URI",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "accounts",
						"type": "address[]"
					},
					{
						"internalType": "uint256[]",
						"name": "ids",
						"type": "uint256[]"
					}
				],
				"name": "balanceOfBatch",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "",
						"type": "uint256[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint32",
						"name": "frogId",
						"type": "uint32"
					},
					{
						"internalType": "uint32",
						"name": "borrowedId",
						"type": "uint32"
					},
					{
						"internalType": "address",
						"name": "lender",
						"type": "address"
					}
				],
				"name": "borrowForBreeding",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint32",
						"name": "parent1",
						"type": "uint32"
					},
					{
						"internalType": "uint32",
						"name": "parent2",
						"type": "uint32"
					}
				],
				"name": "breed",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint32",
						"name": "frogId",
						"type": "uint32"
					}
				],
				"name": "getFrog",
				"outputs": [
					{
						"components": [
							{
								"components": [
									{
										"internalType": "uint16",
										"name": "head",
										"type": "uint16"
									},
									{
										"internalType": "uint16",
										"name": "eyes",
										"type": "uint16"
									},
									{
										"internalType": "uint16",
										"name": "body",
										"type": "uint16"
									},
									{
										"internalType": "uint16",
										"name": "accessory",
										"type": "uint16"
									},
									{
										"internalType": "uint8",
										"name": "color",
										"type": "uint8"
									},
									{
										"internalType": "uint8",
										"name": "eyeColor",
										"type": "uint8"
									}
								],
								"internalType": "struct FroggyBase.genes",
								"name": "genes",
								"type": "tuple"
							},
							{
								"internalType": "uint32[2]",
								"name": "parentIds",
								"type": "uint32[2]"
							},
							{
								"internalType": "uint16",
								"name": "generation",
								"type": "uint16"
							}
						],
						"internalType": "struct FroggyBase.Frog",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					}
				],
				"name": "isApprovedForAll",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "uint16",
								"name": "head",
								"type": "uint16"
							},
							{
								"internalType": "uint16",
								"name": "eyes",
								"type": "uint16"
							},
							{
								"internalType": "uint16",
								"name": "body",
								"type": "uint16"
							},
							{
								"internalType": "uint16",
								"name": "accessory",
								"type": "uint16"
							},
							{
								"internalType": "uint8",
								"name": "color",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "eyeColor",
								"type": "uint8"
							}
						],
						"internalType": "struct FroggyBase.genes",
						"name": "_genes",
						"type": "tuple"
					}
				],
				"name": "releaseFrog",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint32",
						"name": "frogId",
						"type": "uint32"
					},
					{
						"internalType": "uint256",
						"name": "price",
						"type": "uint256"
					}
				],
				"name": "rentForBreeding",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256[]",
						"name": "ids",
						"type": "uint256[]"
					},
					{
						"internalType": "uint256[]",
						"name": "amounts",
						"type": "uint256[]"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "safeBatchTransferFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "safeTransferFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_admin",
						"type": "address"
					}
				],
				"name": "setAdmin",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "approved",
						"type": "bool"
					}
				],
				"name": "setApprovalForAll",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "interfaceId",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "uri",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"balanceOf(address,uint256)": {
					"details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
				},
				"balanceOfBatch(address[],uint256[])": {
					"details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
				},
				"borrowForBreeding(uint32,uint32,address)": {
					"details": "Borrow frog to breed."
				},
				"breed(uint32,uint32)": {
					"details": "Breed frogs to produce child frog. Mint child frog to message sender."
				},
				"getFrog(uint32)": {
					"details": "Get frog metadata by id."
				},
				"isApprovedForAll(address,address)": {
					"details": "See {IERC1155-isApprovedForAll}."
				},
				"releaseFrog((uint16,uint16,uint16,uint16,uint8,uint8))": {
					"details": "Mints a frog. Only available to admin."
				},
				"rentForBreeding(uint32,uint256)": {
					"details": "Rent frog out for breeding."
				},
				"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
					"details": "See {IERC1155-safeBatchTransferFrom}."
				},
				"safeTransferFrom(address,address,uint256,uint256,bytes)": {
					"details": "See {IERC1155-safeTransferFrom}."
				},
				"setAdmin(address)": {
					"details": "Assigns a new address as the admin. Only available to the current admin.",
					"params": {
						"_admin": "The address of the new admin"
					}
				},
				"setApprovalForAll(address,bool)": {
					"details": "See {IERC1155-setApprovalForAll}."
				},
				"supportsInterface(bytes4)": {
					"details": "See {IERC165-supportsInterface}."
				},
				"uri(uint256)": {
					"details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
				}
			},
			"title": "FroggyOwnership Facet that manages breeding of frogs",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/FroggyBreeding.sol": "FroggyBreeding"
		},
		"evmVersion": "berlin",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/token/ERC1155/ERC1155.sol": {
			"keccak256": "0x04d6d1342ece664085921a4fabc928a7bcf1cf2873fa81780f61a54dc2b9b66e",
			"license": "MIT",
			"urls": [
				"bzz-raw://c6d2b052effa2e9a7479b0fea53b46f4cbbd91947848ef632aadad20ae2e9275",
				"dweb:/ipfs/QmcZp7f5cooGZrhHE8RC1yQR53RFZt19d5fyVqNfbHmPgY"
			]
		},
		"@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
			"keccak256": "0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9",
			"license": "MIT",
			"urls": [
				"bzz-raw://f920a631bf986c610fe573d3c70a2bb6f224f86f4a8550016470c7ee476c9ab5",
				"dweb:/ipfs/QmYzsyVMfnaREKHcHv5RPS8Xg5r1Q38E2SDsGBTnXeFWzb"
			]
		},
		"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
			"keccak256": "0xc743d2235b8854045c308d2f8f1ed88efed6c2bebf2b7a4a51ea42480c82e566",
			"license": "MIT",
			"urls": [
				"bzz-raw://05e54e397a053f319187999ef4d65446a7f15f693ddd66dfaed4d856f67dac4e",
				"dweb:/ipfs/QmbGTFVdZxShg76UPcuLAXm6HBjZx3Vn6CL1eaBhV9rST1"
			]
		},
		"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {
			"keccak256": "0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574",
			"license": "MIT",
			"urls": [
				"bzz-raw://e46c80ea068989111d6103e5521223f9ef337e93de76deed8b03f75c6f7b2797",
				"dweb:/ipfs/QmNoSE6knNfFncdDDLTb3fGR6oSQty1srG96Vsx3E9wQdw"
			]
		},
		"@openzeppelin/contracts/utils/Address.sol": {
			"keccak256": "0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4",
			"license": "MIT",
			"urls": [
				"bzz-raw://997ca03557985b3c6f9143a18b6c3a710b3bc1c7f189ee956d305a966ecfb922",
				"dweb:/ipfs/QmQaD3Wb62F88SHqmpLttvF6wKuPDQep2LLUcKPekeRzvz"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
			"license": "MIT",
			"urls": [
				"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
				"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
			]
		},
		"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
			"keccak256": "0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b",
			"license": "MIT",
			"urls": [
				"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d",
				"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43"
			]
		},
		"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
			"license": "MIT",
			"urls": [
				"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f",
				"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"
			]
		},
		"contracts/FroggyAccessControl.sol": {
			"keccak256": "0xf4e41a66a073b0163f5dcc992569aa2b125a66dbdb7762cda207b8cb0cfa1270",
			"license": "MIT",
			"urls": [
				"bzz-raw://183efdc41876957419464235e9a7b4eaa07195447053f44acebd2aace19f0b2f",
				"dweb:/ipfs/QmNhKZHAN9LnSRVAtZ7RZkjghhW24fQrGJW93GdN14TWSQ"
			]
		},
		"contracts/FroggyBase.sol": {
			"keccak256": "0xa77e16e358bfa30e9ba08f3f8aaa79ba27bf0b422b8e0ba0f4811cd2048e3d29",
			"license": "UNLICENSED",
			"urls": [
				"bzz-raw://b2ebbb2d629bc9bdc0115ea0a65161e823fc51231b3bdb2617089040a9d98110",
				"dweb:/ipfs/QmTB7Zwzfu5Lo5x4ZVPVosrMeBM9EwZEy5TNKkPcXnZXPA"
			]
		},
		"contracts/FroggyBreeding.sol": {
			"keccak256": "0x402ddf8861ccf126742a1ab3d12cc0fd0793cb48e3089bab6c272b87d7c2e33e",
			"license": "MIT",
			"urls": [
				"bzz-raw://b328fa7b7d0ce78248cd20afee39110f276972f5a214dfa3319c0b095b9d10ad",
				"dweb:/ipfs/QmdPaQPYzj46r95sEbKk538VwuNMsT1p3hYDVPhLbYbJpJ"
			]
		},
		"contracts/FroggyOwnership.sol": {
			"keccak256": "0xc4dfbb1a0652f03346d64d644930267fb5589862f7202e115330d953f509e0da",
			"license": "MIT",
			"urls": [
				"bzz-raw://926a3664e04b8aaf73f00cc645a5087df8a51e2efdb61ef4379debb0c34fa6c6",
				"dweb:/ipfs/QmbMguoA5uFg9M6QNze2BjsW3zmkt5wSdAb3XzsRbNKYSu"
			]
		},
		"contracts/IGeneMixer.sol": {
			"keccak256": "0xcf894e7dfaf3307c94fa9fee1d83fcb381e8fd165af0447772714fd75bfdaecb",
			"license": "MIT",
			"urls": [
				"bzz-raw://72378cdf20d50141da939e70b652fd65778c9c25f4deef68da139f95a1b64a3f",
				"dweb:/ipfs/QmaMomZLzZq9tYfffGQkMHAFVS9bzNw58imEKkgReVRt6s"
			]
		},
		"contracts/LilypadOwnership.sol": {
			"keccak256": "0xb485a3d2cfec69bf851f1f1fc55ccf3a4a4cd7bb3fb694290648ba664ae35d82",
			"license": "MIT",
			"urls": [
				"bzz-raw://40bc65cc735ccb79f86a9e291cba62a79a79619a92311a2fbfccbe14e36a57d3",
				"dweb:/ipfs/QmZhkndX7QLELpWzjwZp4K92c5uQp6mogfHukmrk5ZUKY7"
			]
		}
	},
	"version": 1
}